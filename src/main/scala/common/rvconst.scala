//=======================================================================
// RISCV Constants
// Watson Huang
// Dec 3, 2017
// 
// Declare all constants for rvcore
//=======================================================================
package rvcommon

import chisel3._
import chisel3.util._

trait rvspec {
    val xlen = 32       //x register bits, SPEC Vol.I Ch2.1
    val xrsz = 32       //x register size, SPEC Vol.I Figure 2.1
    //val xext = "I"      //Encoding of Extension, SPEC Vol.II Table 3.2
    //val vmem = false
    //val NOP = UInt(0x00000013, xlen) //NOP Instruction, SPEC Vol.I Ch2.4
}

trait rvdef {
    val opbl = 0
    val opbh = 6
    val rdbl = 7
    val rdbh = 11
    val rs1bl = 15
    val rs1bh = 19
    val rs2bl = 20
    val rs2bh = 24
    val shamtsz = 5 //shift amount bit size
}

trait rvinst {
    //For Reg-Reg instructions, RV32I Base Instruction Set List up to down order
    val ADD     = BitPat("b0000000??????????000?????0110011")
    val SUB     = BitPat("b0100000??????????000?????0110011")
    val SLL     = BitPat("b0000000??????????001?????0110011")
    val SLT     = BitPat("b0000000??????????010?????0110011")
    val SLTU    = BitPat("b0000000??????????011?????0110011")
    val XOR     = BitPat("b0000000??????????100?????0110011")
    val SRL     = BitPat("b0000000??????????101?????0110011")
    val SRA     = BitPat("b0100000??????????101?????0110011")
    val OR      = BitPat("b0000000??????????110?????0110011")
    val AND     = BitPat("b0000000??????????111?????0110011")
    //For Reg-Imm instructions, RV32I Base Instruction Set List up to down order
    val ADDI     = BitPat("b?????????????????000?????0010011")
    val SLTI     = BitPat("b?????????????????010?????0010011")
    val SLTIU    = BitPat("b?????????????????011?????0010011")
    val XORI     = BitPat("b?????????????????100?????0010011")
    val ORI      = BitPat("b?????????????????110?????0010011")
    val ANDI     = BitPat("b?????????????????111?????0010011")
    val SLLI     = BitPat("b0000000??????????001?????0010011")
    val SRLI     = BitPat("b0000000??????????101?????0010011")
    val SRAI     = BitPat("b0100000??????????101?????0010011")
}

trait rvalu {
    val X = UInt(0xF, 4) //Use non-exist op for debug
    val ADD = UInt(0, 4) //value as Verilog style: {funct7[5], funct3[2:0]} = 4'b0000
    val SUB = UInt(8, 4) //{funct7[5], funct3[2:0]} = 4'b1000
    val SLL = UInt(1, 4)
    val SLT = UInt(2, 4)
    val SLTU = UInt(3, 4)
    val XOR = UInt(4, 4)
    val SRL = UInt(5, 4)
    val SRA = UInt(13, 4) //{funct7[5], funct3[2:0]} = 4'b1101
    val OR = UInt(6, 4)
    val AND = UInt(7, 4)
}

object rvspec extends rvspec
object rvinst extends rvinst with rvdef
object rvalu extends rvalu

package rvdp {
    object op2_sel {
        val X = UInt(0,1) //Default
        val R = UInt(0,1) //Register
        val I = UInt(1,1) //Immediate Value
    }
}